package handlers

import (
	"net/http"
	"strconv"

	"github.com/gin-gonic/gin"
	"github.com/workoflow/ai-orchestrator-api/internal/services"
)

type AuthHandler struct {
	oauthService *services.OAuthService
	jwtService   *services.JWTService
	tenantService *services.TenantService
}

type LoginRequest struct {
	Provider string `json:"provider" binding:"required"`
}

type LoginResponse struct {
	AuthURL   string `json:"auth_url"`
	SessionID string `json:"session_id"`
	State     string `json:"state"`
}

type CallbackRequest struct {
	Code         string `json:"code" binding:"required"`
	State        string `json:"state" binding:"required"`
	Provider     string `json:"provider" binding:"required"`
	SessionID    string `json:"session_id" binding:"required"`
}

type TokenResponse struct {
	AccessToken  string `json:"access_token"`
	RefreshToken string `json:"refresh_token"`
	ExpiresIn    int    `json:"expires_in"`
	TokenType    string `json:"token_type"`
	User         UserInfo `json:"user"`
}

type UserInfo struct {
	ID             uint   `json:"id"`
	Email          string `json:"email"`
	Name           string `json:"name"`
	OrganizationID uint   `json:"organization_id"`
	Role           string `json:"role"`
}

type RefreshTokenRequest struct {
	RefreshToken string `json:"refresh_token" binding:"required"`
}

func NewAuthHandler(oauthService *services.OAuthService, jwtService *services.JWTService, tenantService *services.TenantService) *AuthHandler {
	return &AuthHandler{
		oauthService:  oauthService,
		jwtService:    jwtService,
		tenantService: tenantService,
	}
}

// @Summary Initiate OAuth login
// @Description Start OAuth flow with the specified provider
// @Tags Authentication
// @Accept json
// @Produce json
// @Param request body LoginRequest true "Login request"
// @Success 200 {object} LoginResponse
// @Failure 400 {object} ErrorResponse
// @Failure 500 {object} ErrorResponse
// @Router /auth/login [post]
func (h *AuthHandler) Login(c *gin.Context) {
	var req LoginRequest
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, ErrorResponse{
			Error:   "Invalid request",
			Message: err.Error(),
		})
		return
	}

	// Initiate OAuth flow
	authURL, sessionID, state, err := h.oauthService.InitiateOAuth(c.Request.Context(), req.Provider)
	if err != nil {
		c.JSON(http.StatusInternalServerError, ErrorResponse{
			Error:   "Failed to initiate OAuth",
			Message: err.Error(),
		})
		return
	}

	c.JSON(http.StatusOK, LoginResponse{
		AuthURL:   authURL,
		SessionID: sessionID,
		State:     state,
	})
}

// @Summary Handle OAuth callback
// @Description Handle OAuth provider callback and complete authentication
// @Tags Authentication
// @Accept json
// @Produce json
// @Param request body CallbackRequest true "Callback request"
// @Success 200 {object} TokenResponse
// @Failure 400 {object} ErrorResponse
// @Failure 401 {object} ErrorResponse
// @Failure 500 {object} ErrorResponse
// @Router /auth/callback [post]
func (h *AuthHandler) Callback(c *gin.Context) {
	var req CallbackRequest
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, ErrorResponse{
			Error:   "Invalid request",
			Message: err.Error(),
		})
		return
	}

	// Complete OAuth flow
	user, err := h.oauthService.CompleteOAuth(c.Request.Context(), req.Provider, req.Code, req.State, req.SessionID)
	if err != nil {
		c.JSON(http.StatusUnauthorized, ErrorResponse{
			Error:   "OAuth authentication failed",
			Message: err.Error(),
		})
		return
	}

	// Generate JWT tokens
	accessToken, err := h.jwtService.GenerateAccessToken(user.ID, user.OrganizationID)
	if err != nil {
		c.JSON(http.StatusInternalServerError, ErrorResponse{
			Error:   "Failed to generate access token",
			Message: err.Error(),
		})
		return
	}

	refreshToken, err := h.jwtService.GenerateRefreshToken(user.ID)
	if err != nil {
		c.JSON(http.StatusInternalServerError, ErrorResponse{
			Error:   "Failed to generate refresh token",
			Message: err.Error(),
		})
		return
	}

	c.JSON(http.StatusOK, TokenResponse{
		AccessToken:  accessToken,
		RefreshToken: refreshToken,
		ExpiresIn:    86400, // 24 hours
		TokenType:    "Bearer",
		User: UserInfo{
			ID:             user.ID,
			Email:          user.Email,
			Name:           user.Name,
			OrganizationID: user.OrganizationID,
			Role:           user.Role,
		},
	})
}

// @Summary Refresh access token
// @Description Refresh access token using refresh token
// @Tags Authentication
// @Accept json
// @Produce json
// @Param request body RefreshTokenRequest true "Refresh token request"
// @Success 200 {object} TokenResponse
// @Failure 400 {object} ErrorResponse
// @Failure 401 {object} ErrorResponse
// @Failure 500 {object} ErrorResponse
// @Router /auth/refresh [post]
func (h *AuthHandler) RefreshToken(c *gin.Context) {
	var req RefreshTokenRequest
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, ErrorResponse{
			Error:   "Invalid request",
			Message: err.Error(),
		})
		return
	}

	// Validate refresh token
	claims, err := h.jwtService.ValidateRefreshToken(req.RefreshToken)
	if err != nil {
		c.JSON(http.StatusUnauthorized, ErrorResponse{
			Error:   "Invalid refresh token",
			Message: err.Error(),
		})
		return
	}

	// Get user
	user, err := h.tenantService.GetUser(claims.UserID)
	if err != nil {
		c.JSON(http.StatusUnauthorized, ErrorResponse{
			Error:   "User not found",
			Message: err.Error(),
		})
		return
	}

	// Generate new tokens
	accessToken, err := h.jwtService.GenerateAccessToken(user.ID, user.OrganizationID)
	if err != nil {
		c.JSON(http.StatusInternalServerError, ErrorResponse{
			Error:   "Failed to generate access token",
			Message: err.Error(),
		})
		return
	}

	newRefreshToken, err := h.jwtService.GenerateRefreshToken(user.ID)
	if err != nil {
		c.JSON(http.StatusInternalServerError, ErrorResponse{
			Error:   "Failed to generate refresh token",
			Message: err.Error(),
		})
		return
	}

	c.JSON(http.StatusOK, TokenResponse{
		AccessToken:  accessToken,
		RefreshToken: newRefreshToken,
		ExpiresIn:    86400, // 24 hours
		TokenType:    "Bearer",
		User: UserInfo{
			ID:             user.ID,
			Email:          user.Email,
			Name:           user.Name,
			OrganizationID: user.OrganizationID,
			Role:           user.Role,
		},
	})
}

// @Summary Logout user
// @Description Logout user and invalidate tokens
// @Tags Authentication
// @Accept json
// @Produce json
// @Security BearerAuth
// @Success 200 {object} SuccessResponse
// @Failure 401 {object} ErrorResponse
// @Router /auth/logout [post]
func (h *AuthHandler) Logout(c *gin.Context) {
	userID, exists := c.Get("user_id")
	if !exists {
		c.JSON(http.StatusUnauthorized, ErrorResponse{
			Error:   "Unauthorized",
			Message: "User not authenticated",
		})
		return
	}

	// Invalidate user tokens (this would typically involve blacklisting tokens or clearing from cache)
	err := h.jwtService.InvalidateUserTokens(userID.(uint))
	if err != nil {
		c.JSON(http.StatusInternalServerError, ErrorResponse{
			Error:   "Failed to logout",
			Message: err.Error(),
		})
		return
	}

	c.JSON(http.StatusOK, SuccessResponse{
		Success: true,
		Message: "Logged out successfully",
	})
}

// @Summary Get current user info
// @Description Get information about the currently authenticated user
// @Tags Authentication
// @Produce json
// @Security BearerAuth
// @Success 200 {object} UserInfo
// @Failure 401 {object} ErrorResponse
// @Router /auth/me [get]
func (h *AuthHandler) Me(c *gin.Context) {
	userID, exists := c.Get("user_id")
	if !exists {
		c.JSON(http.StatusUnauthorized, ErrorResponse{
			Error:   "Unauthorized",
			Message: "User not authenticated",
		})
		return
	}

	orgID, exists := c.Get("organization_id")
	if !exists {
		c.JSON(http.StatusUnauthorized, ErrorResponse{
			Error:   "Unauthorized",
			Message: "Organization not found",
		})
		return
	}

	// Get user details
	user, err := h.tenantService.GetUser(userID.(uint))
	if err != nil {
		c.JSON(http.StatusInternalServerError, ErrorResponse{
			Error:   "Failed to get user",
			Message: err.Error(),
		})
		return
	}

	c.JSON(http.StatusOK, UserInfo{
		ID:             user.ID,
		Email:          user.Email,
		Name:           user.Name,
		OrganizationID: orgID.(uint),
		Role:           user.Role,
	})
}

// @Summary Get OAuth providers
// @Description Get list of available OAuth providers
// @Tags Authentication
// @Produce json
// @Success 200 {object} map[string]interface{}
// @Router /auth/providers [get]
func (h *AuthHandler) GetProviders(c *gin.Context) {
	providers := h.oauthService.GetAvailableProviders()
	
	c.JSON(http.StatusOK, gin.H{
		"providers": providers,
	})
}

// @Summary Validate token
// @Description Validate access token
// @Tags Authentication
// @Produce json
// @Security BearerAuth
// @Success 200 {object} map[string]interface{}
// @Failure 401 {object} ErrorResponse
// @Router /auth/validate [get]
func (h *AuthHandler) ValidateToken(c *gin.Context) {
	userID, userExists := c.Get("user_id")
	orgID, orgExists := c.Get("organization_id")
	
	if !userExists || !orgExists {
		c.JSON(http.StatusUnauthorized, ErrorResponse{
			Error:   "Unauthorized",
			Message: "Invalid token",
		})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"valid":           true,
		"user_id":         userID,
		"organization_id": orgID,
	})
}

// @Summary Get organization info
// @Description Get information about the user's organization
// @Tags Authentication
// @Produce json
// @Security BearerAuth
// @Success 200 {object} map[string]interface{}
// @Failure 401 {object} ErrorResponse
// @Failure 500 {object} ErrorResponse
// @Router /auth/organization [get]
func (h *AuthHandler) GetOrganization(c *gin.Context) {
	orgID, exists := c.Get("organization_id")
	if !exists {
		c.JSON(http.StatusUnauthorized, ErrorResponse{
			Error:   "Unauthorized",
			Message: "Organization not found",
		})
		return
	}

	orgIDUint := orgID.(uint)
	org, err := h.tenantService.GetOrganization(orgIDUint)
	if err != nil {
		c.JSON(http.StatusInternalServerError, ErrorResponse{
			Error:   "Failed to get organization",
			Message: err.Error(),
		})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"id":         org.ID,
		"name":       org.Name,
		"domain":     org.Domain,
		"created_at": org.CreatedAt,
		"active":     org.Active,
	})
}